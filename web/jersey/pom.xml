<!--

    Copyright 2005-2014 The Kuali Foundation

    Licensed under the Educational Community License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

    http://www.opensource.org/licenses/ecl2.php

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.

-->

<!--
  Kuali Rice ArcheType Help

  This is the main maven build file for the project as known as a project object model.
  See the comments below to understand the major pieces of this pom. Where not commented,
  see the maven documentation for more information.
-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <name>The ducktyping-example Jersey Module</name>
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>com.github.kualigan</groupId>
    <artifactId>ducktyping-example-web</artifactId>
    <version>1.0-SNAPSHOT</version>
  </parent>
  <artifactId>ducktyping-example-jersey</artifactId>
  <packaging>war</packaging>

  <properties>
    <jersey.version>1.18.2</jersey.version>
    <jackson.version>1.9.13</jackson.version>
  </properties>

  <build>
    <resources>
      <resource>
        <directory>src/main/resources</directory>
        <filtering>true</filtering>
      </resource>
    </resources>

    <!--
      To help manage complex builds, the maven enforcer plugin has many useful rules.
      This is not configured in this sample pom for simplicity sake.

      http://maven.apache.org/plugins/maven-enforcer-plugin/
    -->
    <plugins>

      <!--
        Compiler plugin to specify Java source and target versions and encoding
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
      </plugin>

      <!--
        Using war overlays to extract the web content from the rice web module.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
      </plugin>

      <!--
        Adds a new source directory for integration tests.

        In order for the buildhelper plugin to work with eclipse and m2e, an m2e-extra eclipse plugin
        must be installed called: org.sonatype.m2e.buildhelper. This is the case until the buildhelper plugin
        directly supports m2e

        http://stackoverflow.com/questions/8212846/cant-install-eclipse-plugin-m2e-connector-for-build-helper-maven-plugin-0-15-0
      -->
      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
      </plugin>

      <!--
        This executes unit tests. These tests are executed by default when the project is built.
      -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
      </plugin>

      <!--
        This allows the application be be launched in a jetty server using a maven command.
        A tomcat plugin could also be configured and used if desired.
      -->
      <plugin>
        <groupId>org.mortbay.jetty</groupId>
        <artifactId>jetty-maven-plugin</artifactId>
        <version>${plugin.jetty.version}</version>
        <configuration>
          <webAppConfig>
            <contextPath>/ducktyping-example</contextPath>
            <allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
          </webAppConfig>
          <connectors>
            <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
              <port>${jetty.port}</port>
            </connector>
          </connectors>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>${database.groupId}</groupId>
            <artifactId>${database.artifactId}</artifactId>
            <version>${database.version}</version>
            <scope>runtime</scope>
          </dependency>
        </dependencies>
      </plugin>

      <plugin>
        <groupId>org.apache.tomcat.maven</groupId>
        <artifactId>tomcat7-maven-plugin</artifactId>
        <version>2.1</version>
        <configuration>
          <path>/ducktyping-example</path>
        </configuration>
        <executions>
          <execution>
            <id>tomcat-run</id>
            <goals>
              <goal>exec-war-only</goal>
            </goals>
            <phase>package</phase>
            <configuration>
              <path>/ducktyping-example</path>
            </configuration>
          </execution>
        </executions>
        <dependencies>
          <dependency>
            <groupId>${database.groupId}</groupId>
            <artifactId>${database.artifactId}</artifactId>
            <version>${database.version}</version>
          </dependency>
        </dependencies>
      </plugin>

    </plugins>
  </build>

  <!--
  This is a profile activate and enables a special build configuration when executing integration tests.
  The profile is activated by setting the property maven.failsafe.skip to false.
  -->
  <profiles>
    <profile>
      <id>itests</id>
      <activation>
        <property>
          <name>maven.failsafe.skip</name>
          <value>false</value>
        </property>
      </activation>
      <properties>
        <jetty.stop.port>9999</jetty.stop.port>
      </properties>
      <build>
        <plugins>

          <!--
            This executes integration tests. These tests are NOT executed by default when the project is built.
          -->
          <plugin>
            <groupId>org.apache.maven.plugins</groupId>
            <artifactId>maven-failsafe-plugin</artifactId>
          </plugin>

          <!--
          This configures jetty to startup and shut down for integration tests.  This allows integration
          tests to call into the application using web requests.
          A tomcat plugin could also be configured and used if desired.
          -->
          <plugin>
            <groupId>org.mortbay.jetty</groupId>
            <artifactId>jetty-maven-plugin</artifactId>
            <version>${plugin.jetty.version}</version>
            <configuration>
              <webAppConfig>
                <contextPath>/ducktyping-example</contextPath>
                <allowDuplicateFragmentNames>true</allowDuplicateFragmentNames>
              </webAppConfig>
              <connectors>
                <connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
                  <port>${jetty.port}</port>
                </connector>
              </connectors>
              <stopKey>stop_jetty</stopKey>
              <stopPort>${jetty.stop.port}</stopPort>
            </configuration>
            <executions>
              <execution>
                <id>start-jetty</id>
                <phase>pre-integration-test</phase>
                <goals>
                  <goal>start</goal>
                </goals>
                <configuration>
                  <scanIntervalSeconds>0</scanIntervalSeconds>
                  <daemon>true</daemon>
                </configuration>
              </execution>
              <execution>
                <id>stop-jetty</id>
                <phase>post-integration-test</phase>
                <goals>
                  <goal>stop</goal>
                </goals>
              </execution>
            </executions>
            <dependencies>
              <dependency>
                <groupId>${database.groupId}</groupId>
                <artifactId>${database.artifactId}</artifactId>
                <version>${database.version}</version>
                <scope>runtime</scope>
              </dependency>
            </dependencies>
          </plugin>
        </plugins>
      </build>
    </profile>
  </profiles>

  <dependencies>

    <!--
      Kuali Rice libraries

      Ideally you only declare the modules of rice you are using.
      In practice, you may need to declare them all until rice's modularity work is complete.

      The only modules rice recommends compiling against are api & framework modules.

      It is usually a good idea to list ALL of the third party libraries being directly references in code.
      This makes it explicit which libraries are being used rather than coming in through a transitive relationship
      with other libraries. The http://maven.apache.org/plugins/maven-dependency-plugin/ does a pretty good job of
      finding these missing dependencies.
    -->
    <!-- core -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-api</artifactId>
    </dependency>

    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-web</artifactId>
    </dependency>
    <!-- core service -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-core-service-web</artifactId>
    </dependency>
    <!-- edl -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-edl-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-edl-impl</artifactId>
    </dependency>
    <!-- legacy rice impl module -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-impl</artifactId>
    </dependency>
    <!-- ken -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ken-api</artifactId>
    </dependency>
    <!-- kew -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kew-impl</artifactId>
    </dependency>
    <!-- kim (not including kim-ldap support) -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kim-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kim-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-kim-impl</artifactId>
    </dependency>
    <!-- kns (not including legacy kns) -->
    <!-- krad -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krad-app-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krad-web-framework</artifactId>
    </dependency>
    <!-- krms -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krms-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krms-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-krms-impl</artifactId>
    </dependency>
    <!-- ksb -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ksb-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ksb-client-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ksb-server-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-ksb-web</artifactId>
    </dependency>
    <!-- location -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-framework</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-impl</artifactId>
    </dependency>
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-location-web</artifactId>
    </dependency>
    <!-- web -->
    <dependency>
      <groupId>org.kuali.rice</groupId>
      <artifactId>rice-web</artifactId>
      <type>war</type>
    </dependency>

    <!-- third party libraries -->
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>javax.servlet-api</artifactId>
    </dependency>

    <dependency>
      <groupId>javax.servlet.jsp</groupId>
      <artifactId>jsp-api</artifactId>
    </dependency>

    <!-- Jersey + Spring -->
    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-mapper-asl</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>org.codehaus.jackson</groupId>
      <artifactId>jackson-core-asl</artifactId>
      <version>${jackson.version}</version>
    </dependency>

    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-server</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey</groupId>
      <artifactId>jersey-json</artifactId>
      <version>${jersey.version}</version>
    </dependency>
    <dependency>
      <groupId>com.sun.jersey.contribs</groupId>
      <artifactId>jersey-spring</artifactId>
      <version>${jersey.version}</version>
      <exclusions>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-core</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-aop</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-web</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-beans</artifactId>
        </exclusion>
        <exclusion>
          <groupId>org.springframework</groupId>
          <artifactId>spring-context</artifactId>
        </exclusion>
      </exclusions>
    </dependency>
    <dependency>
      <groupId>com.github.kualigan</groupId>
      <artifactId>ducktyping-example-impl</artifactId>
      <version>${project.version}</version>
    </dependency>

    <dependency>
      <groupId>junit</groupId>
      <artifactId>junit</artifactId>
    </dependency>


  </dependencies>
</project>
